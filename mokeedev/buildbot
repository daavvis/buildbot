#!/bin/bash

# Defaults
SAUCE=~/mkkk
MOVE=y
STORAGE=/media/daavvis/storage/1foronlyme/4.4.2
SYNC=n
J=16
BP=y
CCACHE=y
QCLEAN=n
CLEAN=n
OTA=y
FTP=n
FTPHOST=mokeedev.com
FTPUSER=
FTPPASS=
FTPFULL=FULL/UNOFFICIAL
FTPOTA=OTA/UNOFFICIAL
DO=

readonly red=$(tput setaf 1) #  red
readonly grn=$(tput setaf 2) #  green
readonly ylw=$(tput setaf 3) #  yellow
readonly blu=$(tput setaf 4) #  blue
readonly cya=$(tput setaf 6) #  cyan
readonly txtbld=$(tput bold) # Bold
readonly bldred=$txtbld$red  #  red
readonly bldgrn=$txtbld$grn  #  green
readonly bldylw=$txtbld$ylw  #  yellow
readonly bldblu=$txtbld$blu  #  blue
readonly bldcya=$txtbld$cya  #  cyan
readonly txtrst=$(tput sgr0) # Reset

function err {
  echo "$txtrst${red}$*$txtrst" >&2
}

function warn {
  echo "$txtrst${ylw}$*$txtrst" >&2
}

function info {
  echo "$txtrst${grn}$*$txtrst"
}


function askyn {
  local question=$1
  local default=$2
  local prompt response
  case "$default" in
    y|Y) prompt="$txtrst$grn$question [Y/n]? $txtrst"; default="y";;
    n|N) prompt="$txtrst$grn$question [y/N]? $txtrst"; default="n";;
     '') prompt="$txtrst$grn$question [y/n]? $txtrst";;
      *) echo "Error in script"; exit 1;;
  esac

  while :; do
    read -n 1 -rp "$prompt" response
    [[ -n $response ]] && echo >&2
    if [[ $response =~ ^[Yy]([Ee][Ss])?$ ]]; then
      [ -t 1 ] || echo y
      return 0
    elif [[ $response =~ ^[Nn]([Oo])?$ ]]; then
      [ -t 1 ] || echo n
      return 1
    elif [[ -z $reponse && -n $default ]]; then
      [ -t 1 ] || echo $default
      [[ $default = y ]]
      return $?
    fi
    err "Please press y or n"
  done
}

function ask {
  local opt=
  [[ $1 = -s ]] && opt="-s" && shift
  local question=$1
  local default=$2
  local response
  read $opt -rep "$txtrst$grn$question $txtrst" -i "$default" response
  [[ $opt = -s ]] && echo >&2
  if [[ -n $response ]]; then
    echo "$response"
    return 0
  else
    return 1
  fi
}
  
function demand {
  local question=$1
  local default=$2
  local response
  read -rep "$txtrst$grn$question $txtrst" -i "$default" response
  while [[ -z $response ]]; do
    err "Please enter a value" 
    read -rep "$txtrst$grn$1 $txtrst" -i "$default" response
  done
  echo "$response"
}

function isIn {
  for val in "${@:2}"; do
    [[ $val = $1 ]] && return 0 
  done
  return 1
}


function usage {
  cat >&2 <<!EOD
Usage: $(basename $0) [OPTIONS] device...
Options:
        -h, --help            this message
        -g, --go              don't ask any questions, just do it
        -m, --move=DIRECTORY  move built ROMs to DIRECTORY
        +m, --nomove          don't move ROMs
        -s, --sync            sync repos before building
        +s, --nosync          don't sync repos before building
        -C, --ccache          enable ccache
        +C, --noccache        disable ccache
        -q, --quickclean      run mka installclean before building (disables clean)
        +q, --noquickclean    don't mka installclean before building
        -c, --clean           run make clean before building (disables quickclean)
        +c, --noclean         don't make clean before building
            --keepbuildprop   don't delete build.prop
            --noota           don't build OTA packages
        -X                    debug (doesn't actually build anything)
!EOD
  exit $1
}

function checkArg {
  if [[ -z $2 ]]; then
    echo "$(basename $0): option requires an argument: $1" >&2
    exit 1
  fi
}

# The long way, in case getopt is missing or non-GNU
while :; do
  case $1 in
          --help|-h|-\?) usage 0;;
                --go|-g) GO=y;;
              --move|-m) MOVE=y; STORAGE=$2; checkArg $1 "$STORAGE"; shift;;
               --move=*) MOVE=y; STORAGE=${1#*=}; checkArg "--move" "$STORAGE";;
            --nomove|+m) MOVE=n;;
              --sync|-s) SYNC=y;;
            --nosync|+s) SYNC=n;;
            --ccache|-C) CCACHE=y;;
          --noccache|+C) CCACHE=n;;
        --quickclean|-q) CLEAN=n; QCLEAN=y;;
      --noquickclean|+q) QCLEAN=n;;
             --clean|-c) QCLEAN=n; CLEAN=y;;
           --noclean|+c) CLEAN=n;;
        --keepbuildprop) BP=n;;
                --noota) OTA=n;;
                     -X) DO="echo $txtrst${cya}Would: ";;
                     --) shift; break;;
                  -*|+*) usage 1;;
                      *) break;;
  esac
  shift
done

if [[ $# > 0 ]]; then
  DEVICES=( $* )
fi

if [[ $GO != y ]]; then

  until eval SAUCE=$(demand "${bldblu}Enter the path to your build source directory:" $SAUCE) && [[ -d $SAUCE/android ]]; do
    err "$SAUCE doesn't exist"
  done
 
  declare -i i=${#DEVICES[*]}
  if ((i == 0)); then
    DEVICES[$((i++))]=$(demand "What device would you like to build?")
  fi
  echo "Device list: ${DEVICES[*]}"

  while response=$(ask "What other device would you like to build [return if done]?"); do
    if isIn "$response" "${DEVICES[@]}"; then
      err "You already said $response"
    else
      DEVICES[$((i++))]="$response"
    fi
    echo "Device list: ${DEVICES[*]}"
  done
  echo "Final device list: ${DEVICES[*]}"

  while :; do
    if MOVE=$(askyn "Should the finished ROMS be moved to a storage folder" $MOVE); then
      eval STORAGE=$(ask "Enter the path to your storage directory [blank cancels]:" $STORAGE)
      until [[ ! $STORAGE || ( -d "$STORAGE" && -w "$STORAGE" ) ]]; do
        if [[ ! -d "$STORAGE" ]]; then
          askyn "Storage directory $STORAGE doesn't exit, mkdir" y && mkdir -p "$STORAGE" && break
        else
          err "Storage directory $STORAGE is not writable"
        fi
        STORAGE=$(ask "Enter the path to your storage directory [blank cancels]:" $STORAGE)
      done

      if [[ $STORAGE ]]; then
        # Canonicalize
        STORAGE=$(cd "$STORAGE"; pwd -P)
        break
      fi
    else
      break
    fi
  done

  SYNC=$(askyn "Should we sync repositories before build" $SYNC)
	if [ "$SYNC" = "y" ]; then
		J=$(ask "what -j level should we use? 1 for slow internet 16 for fast..." $J)
	fi
  CCACHE=$(askyn "Do you want to use ccache" ${CCACHE:-y})
  BP=$(askyn "Do you want to remove build.prop before the build (recomended)" $BP)
  QCLEAN=$(askyn "Do you want to run mka installclean first (quick clean build)" $QCLEAN)
  CLEAN=$(askyn "Do you want to run make clean first (slow clean build, will delete entire contents of out folder..." $CLEAN)
  OTA=$(askyn "Do you want to make an ota package" $OTA)

  while :; do
    if FTP=$(askyn "Do you want to enable FTP uploading" $FTP); then
          FTPUSER=$(ask "What is your mokeedev.com username:" $FTPUSER)
          FTPPASS=$(ask -s "What is your mokeedev.com password:" $FTPPASS)
          FTPUSERPASS="$FTPUSER:$FTPPASS@"
          info "Checking access to $FTPHOST"
          if curl -# ftp://$FTPUSERPASS$FTPHOST/ >/dev/null; then
            info "Success!"
            break
          fi
    else
      break
   fi
   done

  if [[ $MOVE = y && ! -d $STORAGE ]]; then
    err "Storage directory '$STORAGE' doesn't exist"
    exit 2
  fi

fi

cat <<!EOD
MOVE=$MOVE
STORAGE=$STORAGE
SYNC=$SYNC
J=$J
CCACHE=$CCACHE
BP=$BP
QCLEAN=$QCLEAN
CLEAN=$CLEAN
OTA=$OTA
DEVICES=${DEVICES[@]}"
!EOD

if [[ ${#DEVICES[@]} = 0 ]]; then
  err "Nothing to build"
fi

  for DEVICE in "${DEVICES[@]}"; do
    
OTABDIR=$SAUCE/mokee/FULL/UNOFFICIAL/$DEVICE

	if [[ $OTA = y && ! -d $OTABDIR ]];then
		OTASU=$(askyn "NO OTA BUILD FOLDER FOUND, DO YOU WANT ME TO SET IT UP?" $OTASU1)
		if [ "$OTASU1" = "y" ]; then
			err "SETTING UP BUILD FOLDER"
			mkdir $OTABDIR
			OTAF=n
		else
			err "NOT BUILDING OTA"
			OTAF=y
		fi		
	fi

	while :; do
	if [ $OTA = y ] && [ "$OTAF" = "n" ] && [ ! -e "$OTABDIR"/*".zip" ]; then
		err "NO OLD ROM FOUND IN OTA BUILD FOLDER..."
		OTASU=$(askyn "Do you want to set up to make an ota package" $OTASU)
			if [ "$OTASU" = "y" ]; then
			eval USRSTR=$(ask "Enter the path to your old rom storage directory [blank cancels]:" $USRSTR)
      			until [[ ! $USRSTR || ( -d "$USRSTR" && -w "$USRSTR" ) ]]; do
        			if [[ ! -d "$USRSTR" ]]; then
          			err "$USRSTR DOES NOT EXIST!!"
        			else
          			err "Storage directory $USRSTR is not writable"
        			fi
        			$USRSTR=$(ask "Enter the path to your storage directory [blank cancels]:" $USRSTR)
     			done
				if [[ $USRSTR ]]; then
        			OLDROM=$(ls -t $USRSTR/*".zip" | head -1)
				cp $OLDROM $OTABDIR
				OTAF=n
        			break
      				fi
    			else
			err "NOT BUILDING OTA PACKAGE!!"
			OTAF=y
      			break
			fi
    	fi
  	done

cd "$SAUCE" || exit 3


if [[ $CCACHE = y ]]; then
  export USE_CCACHE=1
elif [[ $CCACHE = n ]]; then
  unset USE_CCACHE
fi

if [ $SYNC = y ]; then
  info "Running repo sync..."
  repo sync -j$J
fi

if [ $CLEAN = y ]; then
  info "Running make clean..."
  make clean
fi

TST=$(date +%s)
DST=$(date +%s)

  info "Building $DEVICE"
cd $SAUCE
. build/envsetup.sh
croot
lunch mk_${DEVICE}-userdebug
  ROMFOLDER=$SAUCE/out/target/product/$DEVICE
  OTABDIR=$SAUCE/mokee/FULL/UNOFFICIAL/$DEVICE
  OTAFOLDER=$SAUCE/mokee/OTA/UNOFFICIAL/$DEVICE

  if [ $BP = y ]; then
    info "Removing build.prop"
    $DO rm -f out/target/product/$DEVICE/system/build.prop
  fi

  if [ $QCLEAN = y ]; then
    info "Running mka installclean..."
    $DO mka installclean
  fi

  info "Running mka bacon..."
  $DO mka bacon

  ROM=$(ls $ROMFOLDER/*.zip | head -1)
  ROMMD=$ROM.md5sum

  if [ $OTA = y ] && [ "$OTAF" = "n" ]; then
    if [ -f $OTABDIR/*.zip ]; then
      info "Copying ROM to OTA build dir..."
      $DO cp $ROM $OTABDIR

      info "Creating OTA.zip..."
      export MK_OTA_INPUT=$SAUCE/mokee/FULL
      export MK_OTA_EXTRA=$SAUCE/mokee/OTA
      $DO ota_all UNOFFICIAL $DEVICE

      info "Cleaning up..."
      OLDROMS=$(ls $OTABDIR/*.zip | tail -n +2 2>/dev/null)
      if [[ $OLDROMS ]]; then
        $DO rm $OLDROMS
      fi

      OTAN=$(ls -t $OTAFOLDER/*".zip" | head -1)
      OTAMD=$(dirname "$OTAN")/md5/$(basename "$OTAN").md5sum
    else
      warn "No existing ROM to build OTA package, just copying ROM for next time"
      $DO cp $ROM $OTABDIR
      OTAF=y
    fi
  fi

  if [ $FTP = y ]; then
    info "Uploading ROM, MD5SUM and, if you made an OTA package, that as well..."
    $DO curl -v -T $ROM ftp://$FTPUSERPASS$FTPHOST/$FTPFULL/$DEVICE/
    $DO curl -v -T $ROMMD ftp://$FTPUSERPASS$FTPHOST/$FTPFULL/$DEVICE/md5/

    if [ $OTA = y ] && [ "$OTAF" = "n" ]; then
      $DO curl -v -T $OTAN ftp://$FTPUSERPASS$FTPHOST/$FTPOTA/$DEVICE/
      $DO curl -v -T $OTAMD ftp://$FTPUSERPASS$FTPHOST/$FTPOTA/$DEVICE/md5/
    fi
  fi

 
  if [ $MOVE = y ]; then
    info "Moving things to $STORAGE directory"
    $DO mkdir -p $STORAGE/$DEVICE/md5 &&
    $DO mv $ROM $STORAGE/$DEVICE &&
    $DO mv $ROMMD $STORAGE/$DEVICE/md5

    if [[ $OTA = y && $OTAF = n ]]; then
      $DO mkdir -p $STORAGE/$DEVICE/OTA/md5 &&
      $DO mv $OTAN $STORAGE/$DEVICE/OTA &&
      $DO mv $OTAMD $STORAGE/$DEVICE/OTA/md5

      $DO rm -rf out/target/OTA
    fi
  fi

  DET=$(date +%s)
  info "Done building $DEVICE in $(((DET-DST)/60)) minutes $(((DET-DST)%60)) seconds"
done
TET=$(date +%s)
info "All done in $(((TET-TST)/60)) minutes $(((TET-TST)%60)) seconds"
